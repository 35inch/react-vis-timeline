{"name":"React-vis-timeline","tagline":"React component for the vis-timeline module","body":"React vis-timeline component\r\n=====================\r\n\r\nReact component for the `vis-timeline` timeline module.\r\n\r\n[vis-timeline documentation](https://visjs.github.io/vis-timeline/docs/timeline/)\r\n\r\n![example chart](https://github.com/visjs/vis-timeline/blob/master/docs/img/timeline.png)\r\n\r\n## Installation\r\n\r\n```\r\nnpm install --save react-vis-timeline\r\n```\r\n\r\nOR\r\n\r\n```\r\nyarn add react-vis-timeline\r\n```\r\n\r\n## Getting Started\r\n\r\n```typescript\r\nimport Timeline from 'react-vis-timeline'\r\n\r\n// https://visjs.github.io/vis-timeline/docs/timeline/#Configuration_Options\r\n\r\nconst options = {\r\n  width: '100%',\r\n  height: '100px',\r\n  // ...\r\n  // ...\r\n}\r\n\r\n// JSX\r\n<Timeline options={options} />\r\n```\r\n\r\n\r\n## What are the differences from `react-visjs-timeline` ?\r\n\r\n* Written in Typescript\r\n* Using `vis-timeline` library! without the  old `vis.js`\r\n* No unnecessary re-renders\r\n\r\n  The old lib caused re-renders on each prop changed, and using immutable objects to detect changes.\r\n  This was very problematic and caused performance issues.\r\n  We don't want to re-render the whole timeline, just because 1 item added to the items array.\r\n  \r\n* API changes (items, groups)\r\n\r\n  vis-timeline already knows how to detect changes with `vis-data`'s DataSet object.\r\n  So in this library, we take it as an advantage and using these DataSets.\r\n  While exposing them to the user within `ref`.\r\n  \r\n  You can also insert initial data with props, and update/add/remove later with ref API.\r\n  \r\n* Expose the timeline's API.\r\n\r\n  Methods like `focus`, `fit`, and many more native vis-timeline methods exposed as well in optional `ref`.\r\n\r\n\r\n## Supported Features\r\n\r\n* Configuration Options\r\n* Items\r\n* Groups\r\n* Custom Times\r\n* Events\r\n* Selection\r\n* Timeline's API\r\n\r\n## Items\r\n\r\nItems follow the exact same for format as they do in `vis-timeline``. See the [vis-timeline documentation](https://visjs.github.io/vis-timeline/docs/timeline/#items) for more information.\r\n\r\n```typescript\r\nconst items = [{\r\n  start: new Date(2010, 7, 15),\r\n  end: new Date(2010, 8, 2),  // end is optional\r\n  content: 'Trajectory A',\r\n}]\r\n\r\n<Timeline\r\n  options={options}\r\n  initialItems={items}\r\n/>\r\n```\r\n\r\n## Groups\r\n\r\nGroups follow the exact same for format as they do in vis-timeline. See the [vis-timeline documentation](https://visjs.github.io/vis-timeline/docs/timeline/#groups) for more information.\r\n\r\n```typescript\r\nconst groups = [{\r\n  id: 1,\r\n  content: 'Group A',\r\n}]\r\n\r\n<Timeline\r\n  options={options}\r\n  initialGroups={groups}\r\n/>\r\n```\r\n\r\n## Custom Times\r\n\r\nCustomTimes defined more declaratively in the component, via the `customTimes` prop.\r\n\r\n```typescript\r\nconst customTimes = [\r\n  {\r\n    id: 'one',\r\n    datetime: new Date()\r\n  },\r\n  {\r\n    id: 'two',\r\n    datetime: 'Tue May 10 2016 16:17:44 GMT+1000 (AEST)'\r\n  }\r\n]\r\n```\r\n\r\nWhen the `customTimes` prop changes, the updated times will be reflected in the timeline.\r\n\r\n## Events\r\n\r\nAll events are supported via prop function handlers. The prop name follows the convention `<eventName>Handler` and the specified function will receive the same arguments as the [vis-timeline counterparts](https://visjs.github.io/vis-timeline/docs/timeline/#Events).\r\nSome vis-timeline event names are not camelcased (e.g. `rangechange`), so the corresponding React prop names need to follow that convention where necessary:\r\n\r\n```typescript\r\n<Timeline\r\n  options={options}\r\n  clickHandler={clickHandler}\r\n  rangechangeHandler={rangeChangeHandler}\r\n/>\r\n\r\nfunction clickHandler(props) {\r\n  // handle click event\r\n}\r\n\r\nfunction rangeChangeHandler(props) {\r\n  // handle range change\r\n}\r\n```\r\n\r\n## Animation\r\n\r\nYou can enable animation (when the options start/end values change) by passing a prop of `animation` to the component. The available options for this prop follow the same conventions as `setWindow` in `vis-timeline`. So you can either pass a boolean value (`true` by default) or an object specifying your animation configuration, e.g:\r\n\r\n```typescript\r\n// animate prop...\r\n{\r\n  duration: 3000,\r\n  easingFunction: 'easeInQuint'\r\n}\r\n```\r\n\r\n## Styling\r\n\r\nImport your custom CSS *after* you import the component from the module, e.g:\r\n\r\n```typescript\r\nimport Timeline from 'react-vis-timeline';\r\nimport './my-custom-css.css';\r\n```\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}